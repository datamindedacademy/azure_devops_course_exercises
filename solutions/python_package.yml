name: python_package_$(Date:yyyyMMdd)

parameters:
  - name: usePoetryCache
    type: string
    default: true

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/

pool:
  vmImage: ubuntu-latest

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'
  displayName: 'Use Python 3.11'

- script: |
    curl -sSL https://install.python-poetry.org | python -
    echo "##vso[task.setvariable variable=PATH]${PATH}:$HOME/.local/bin"
  displayName: 'Install poetry'


- ${{ if eq(parameters.usePoetryCache, true) }}:
  - task: Cache@2
    inputs:
      key: 'poetry | "$(Agent.OS)"'
      # restoreKeys: |
      #   poetry | "$(Agent.OS)"
      #   poetry
      path: $(venv)
      cacheHitVar: POETRY_CAHCE_RESTORED

- script: |
      poetry config virtualenvs.in-project true
      poetry config virtualenvs.path $(venv)
      poetry lock
  displayName: Configure Poetry

- script: |
    poetry install
  displayName: Install dependencies
  condition: eq(variables.POETRY_CAHCE_RESTORED, 'false')

- script: |
    poetry run black .
  displayName: 'Lint'

- script: |
    poetry run pytest -v
  displayName: 'Test'

- script: |
    poetry build
  displayName: 'Build'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: 'Data Minded Azure Devops Workshop/example_package'
  displayName: 'Authenticate'

- script: |
    poetry run twine upload --repository example_package --config-file $(PYPIRC_PATH) dist/*.whl
  displayName: 'Deploy'
